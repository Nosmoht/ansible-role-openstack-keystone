#!/usr/bin/python2 -tt
# -*- coding: utf-8 -*-

import os

OPENSTACK_KEYSTONE_BIN = '/usr/bin/keystone'

# Output of 'keystone user-list' is something like
# +----------------------------------+-------+---------+-------------------+
# |                id                |  name | enabled |       email       |
# +----------------------------------+-------+---------+-------------------+
# | 5c7122afad25465586874e5180a28209 | admin |   True  | admin@example.com |
# +----------------------------------+-------+---------+-------------------+
def user_list(module, command):
	rc, out, err = module.run_command('%s user-list' % (command))
	if rc != 0:
		module.fail_json(msg="Error while checking existing users.", rc=rc, err=err)
	users = dict()
	for row in out.split('\n'):
		if '|' in row:
			items = [ item.strip() for item in row.split('|') ]
			for item in items:
				if not item:
					items.remove('')
			users.update({items[1]: {'id': items[0], 'enabled': items[2], 'email': items[3]}})
			
	return users
		
def user_exit(name, users):
	return users.has_key(name)

def create_user(module, command, name, password, email, enabled):
	command = '%s user-create --name "%s"' % (command, name)
	if password:
		command = '%s --pass "%s"' % (command, password)
	if email:
		command = '%s --email %s' % (command, email)
	if enabled:
		command = '%s --enabled %s' % (command, enabled)
	rc, out, err = module.run_command(command)
	if rc != 0:
 		module.fail_json(msg="Error while creating user", rc=rc, err=err)
	return True 

def delete_user(module, command, name):
	command = '%s user-delete "%s"' % (command, name)
	rc, out, err = module.run_command(command)
	if rc != 0:
 		module.fail_json(msg="Error while deleting user", rc=rc, err=err)
	return True
	
def ensure_user(module):
	name = module.params['name']
	password = module.params['password']
	email = module.params['email']
	enabled = module.params['enabled']
	state = module.params['state']
	token = module.params['token']
	endpoint = module.params['endpoint']
	command = '%s --os-token %s --os-endpoint %s' % (OPENSTACK_KEYSTONE_BIN, token, endpoint)
	changed = False
	
	users = user_list(module, command)
	if state == 'present' and not user_exit(name, users):
		changed = create_user(module, command, name, password, email, enabled)
	elif state == 'absent' and user_exit(name, users):
		changed = delete_user(module, command, name)
	return changed

def main():
	module = AnsibleModule(
	    argument_spec=dict(
			name=dict(required=True, Type='str'),
			password=dict(Default=None, Type='str'),
			email=dict(Default=None, Type='str'),
			enabled=dict(Default=True, Type='bool'),
	        state=dict(default='present', choices=['present', 'absent']),
	        token=dict(Default=None, required=True),
	        endpoint=dict(Default=None, required=True),
	    ),
	)
	
	changed = ensure_user(module)
	module.exit_json(changed=changed, name=module.params['name'])

# import module snippets
from ansible.module_utils.basic import *
main()
